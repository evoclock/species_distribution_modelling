points(acg[j, ], col='red', pch=20, cex=2)
points(acgeo[j, ], col='red', pch=20, cex=2)
georef = subset(acaule, (is.na(lon) | is.na(lat)) & !is.na(locality))
georef
View(georef)
georef$cloc[4]
# create a RasterLayer with the extent of acgeo
r = raster(acge0)
# create a RasterLayer with the extent of acgeo
r = raster(acgeo)
# set the resolution of the cells to (for example) 1 degree
res(r) = 1
# expand (extend) the extent of the RasterLayer a little
r = extend(r, extent(r)+1)
# sample:
acsel = gridSample(acgeo, r, n=1)
# to illustrate the method and show the result
p = rasterToPolygons(r)
plot(p, border='gray')
points(acgeo)
# selected points in red
points(acsel, cex=1, col='red', pch='x')
?gridSample
# Save the clean dataset
file = paste(system.file(package="dismo"), 'outputs/acaule.csv', sep='')
?write.csv
write.csv(file, file = "outputs/acaule.csv")
# Save the clean dataset
write.csv(acaule, file = "outputs/acaule.csv")
acsel = read.csv("outputs/acaule.csv")
View(acsel)
library(dismo)
library(dismo)
library(sf)
acaule = gbif("Solanum", "acaule*", geo = FALSE)
data(acaule)
dim(acaule)
str(acaule)
colnames(acaule)
acgeo = acaule %>% filter(lat != "NA", lon != "NA")
library(dplyr)
acgeo = acaule %>% filter(lat != "NA", lon != "NA")
library(maptools)
data("wrld_simpl")
plot(wrld_simpl, xlim=c(-80,70), ylim=c(-60,10),
axes=TRUE, col="light green")
# restore the box around the map
box()
# add the points
points(acgeo$lon, acgeo$lat, col='orange', pch=20, cex=0.75)
# plot points again to add a border, for better visibility
points(acgeo$lon, acgeo$lat, col='black', cex=0.75)
# Alternatively if you prefer a more up to date package
library(geodata)
world = world(resolution=1, level=0, path = "data/", version="latest")
plot(world, xlim=c(-80,70), ylim=c(-80,40),
axes=TRUE, col="light green")
box()
points(acgeo$lon, acgeo$lat, col='orange', pch=20, cex=0.75)
# plot points again to add a border, for better visibility
points(acgeo$lon, acgeo$lat, col='black', cex=0.75)
# An example of common mistakes contained in GBIF data (mix ups with
# signs, lon and lat)
acaule[c(303,885),1:10]
lonzero = subset(acgeo, lon==0)
lonzero[, 1:13]
dups = duplicated(lonzero[, 1:10])
lonzero = lonzero[dups, ]
lonzero[,1:13]
# Dealing with duplicates by lon and lat
dups2 = duplicated(acgeo[, c('lon', 'lat')])
sum(dups2)
# Correct records that are geographically incorrect
i = acgeo$lon > 0 & acgeo$lat > 0
# if records are greater than 0 for longitude correct to -1 * the longitude
# for that entry
acgeo$lon[i] <- -1 * acgeo$lon[i]
# likewise for latitude, this places them in the correct location
acgeo$lat[i] <- -1 * acgeo$lat[i]
acgeo = acgeo[acgeo$lon < -50 & acgeo$lat > -50, ]
# Regenerate the world plot to check
plot(wrld_simpl, xlim=c(-80,70), ylim=c(-60,10),
axes=TRUE, col="light green")
# restore the box around the map
box()
# add the points
points(acgeo$lon, acgeo$lat, col='orange', pch=20, cex=0.75)
# plot points again to add a border, for better visibility
points(acgeo$lon, acgeo$lat, col='black', cex=0.75)
library(sp)
coordinates(acgeo) = ~lon+lat
crs(acgeo) = crs(wrld_simpl)
ovr = over(acgeo, wrld_simpl)
# Retrieve the 'NAME' variable from 'ovr' and store to a "country" object
cntr = ovr$NAME
# Which records do not match any country (there should be zero after the lat,
# lon correction)
i = which(is.na(cntr))
i
# Which points have coordinates that do not match the GBIF record
j = which(cntr != acgeo$country)
j
cbind(cntr, acgeo$country)[j,]
plot(acgeo)
plot(wrld_simpl, add=T, border='blue', lwd=2)
points(acgeo[j, ], col='red', pch=20, cex=2)
georef = subset(acaule, (is.na(lon) | is.na(lat)) & !is.na(locality))
georef$cloc[4]
# create a RasterLayer with the extent of acgeo
r = raster(acgeo)
# set the resolution of the cells to (for example) 1 degree
res(r) = 1
# expand (extend) the extent of the RasterLayer a little
r = extend(r, extent(r)+1)
# sample:
acsel = gridSample(acgeo, r, n=1)
# to illustrate the method and show the result
p = rasterToPolygons(r)
plot(p, border='gray')
points(acgeo)
# selected points in red
points(acsel, cex=1, col='red', pch='x')
# Save the clean dataset
write.csv(acaule, file = "outputs/acaule.csv")
# In short:
# In short:
# 1) filter rows with NA on lat and lon
# In short:
# 1) filter rows with NA on lat and lon
# 2) Visualise with a map for the geographic distribution of data points,
path = file.path(system.file(package = "dismo"), 'ex')
path
library(dismo)
files = list.files(path, pattern='grd$', full.names=TRUE)
files
predictor = stack(files)
predictors
predictors = stack(files)
predictors
names(predictors)
plot(predictors)
library(maptools)
library(geodata)
world = world(resolution=1, level=0, path = "data/", version="latest")
file = paste(system.file(package = "dismo"), "/ex/bradypus.csv", sep = "")
# get the bradypus data for this example
file = paste(system.file(package = "dismo"), "/ex/bradypus.csv", sep = "")
bradypus = read.table(file, header = TRUE. sep = ',')
bradypus = read.table(file, header = TRUE, sep = ',')
View(bradypus)
bradypus = bradypus[, -1]
View(bradypus)
plot(predictors, 1)
plot(world, add = TRUE)
# get the world boundaries
world = world(resolution=5, level=0, path = "data/", version="latest")
plot(predictors, 1)
plot(world, add = TRUE)
library(maptools)
data(wrld_simpl)
plot(predictors, 1)
plot(wrld_simpl, add = TRUE)
# get the world boundaries
world = world(resolution=6, level=0, path = "data/", version="latest")
# get the bradypus data for this example
file = paste(system.file(package = "dismo"), "/ex/bradypus.csv", sep = "")
bradypus = read.table(file, header = TRUE, sep = ',')
bradypus = bradypus[, -1]
plot(predictors, 1)
plot(world, add = TRUE)
# get the world boundaries
world = world(resolution=5, level=0, path = "data/", version="latest")
plot(predictors, 1)
plot(world, add = TRUE)
# get the world boundaries
world = world(resolution=5, level=0, path = "data/", version="latest")
# get the bradypus data for this example
file = paste(system.file(package = "dismo"), "/ex/bradypus.csv", sep = "")
bradypus = read.table(file, header = TRUE, sep = ',')
bradypus = bradypus[, -1]
plot(predictors, 1)
plot(world, add = TRUE)
# get the world boundaries
world = world(resolution=4, level=0, path = "data/", version="latest")
plot(predictors, 1)
plot(world, add = TRUE)
# get the world boundaries
world = world(resolution=3, level=0, path = "data/", version="latest")
plot(predictors, 1)
plot(world, add = TRUE)
# get the world boundaries
world = world(resolution=2, level=0, path = "data/", version="latest")
plot(predictors, 1)
plot(world, add = TRUE)
# get the world boundaries
world = world(resolution=1, level=0, path = "data/", version="latest")
plot(predictors, 1)
plot(world, add = TRUE)
library(geodata)
# get the world boundaries
world = world(resolution=1, level=0, path = "data/", version="latest")
# get the bradypus data for this example
file = paste(system.file(package = "dismo"), "/ex/bradypus.csv", sep = "")
bradypus = read.table(file, header = TRUE, sep = ',')
bradypus = bradypus[, -1]
plot(predictors, 1)
plot(world, add = TRUE)
# get the world boundaries
world = world(resolution=0, level=0, path = "data/", version="latest")
# get the world boundaries
world = world(resolution=10, level=0, path = "data/", version="latest")
?world
# get the world boundaries
world = world(resolution = 1, level = 0, path = "data/", version="latest")
# get the bradypus data for this example
file = paste(system.file(package = "dismo"), "/ex/bradypus.csv", sep = "")
bradypus = read.table(file, header = TRUE, sep = ',')
bradypus = bradypus[, -1]
plot(predictors, 1)
plot(world, add = TRUE)
library(maptools)
data(wrld_simpl)
plot(predictors, 1)
plot(wrld_simpl, add = TRUE)
points(bradypus, col='blue'
plot(predictors, 1)
plot(world, add = TRUE)
points(bradypus, col='blue')
box()
plot(predictors, 1)
plot(world, add = TRUE)
box()
points(bradypus, col='blue')
plot(predictors, 1)
plot(world, xlim=c(-80,70), ylim=c(-80,40),
add = TRUE)
plot(predictors, 1)
plot(world, xlim=c(-60,40), ylim=c(-120,40),
add = TRUE)
box()
points(bradypus, col='blue')
plot(predictors, 1)
plot(wrld_simpl, xlim=c(-60,40), ylim=c(-120,40), add = TRUE)
plot(predictors, 1)
plot(wrld_simpl, add = TRUE)
points(bradypus, col='blue')
plot(predictors, 1)
plot(world, xlim=c(-60,40), ylim=c(-120,40),
add = TRUE)
plot(predictors, 1)
plot(world, add = TRUE)
points(bradypus, col='blue')
View(world)
presvals = extract(predictors, bradypus)
# setting random seed to always create the same
# random set of points for this example
set.seed(0)
backgr = randomPoints(predictors, 500)
View(backgr)
# extract value of predictor for 500 random background points
backgr = randomPoints(predictors, 500)
absvals = extract(predictors, backgr)
pb = c(rep(1, nrow(presvals)), rep(0, nrow(absvals)))
sdmdata = data.frame(cbind(pb, rbind(presvals, absvals)))
View(sdmdata)
sdmdata[,'biome'] = as.factor(sdmdata[,'biome'])
View(sdmdata)
summary(sdmdata)
View(sdmdata)
setwd("~/Desktop/DS/SDM_solanum_acaule")
corrplot(cor(sdmdata[,2:5]))
?corrplot
library(corrplot)
corrplot(cor(sdmdata[,2:5]))
pairs(sdmdata[,2:5], cex = 0.1)
path = file.path(system.file(package = "dismo"), 'ex')
library(dismo)
files = list.files(path, pattern='grd$', full.names=TRUE)
files
predictors = stack(files)
names(predictors)
plot(predictors)
library(geodata)
# get the world boundaries
world = world(resolution = 1, level = 0, path = "data/", version="latest")
# get the bradypus data for this example
file = paste(system.file(package = "dismo"), "/ex/bradypus.csv", sep = "")
bradypus = read.table(file, header = TRUE, sep = ',')
bradypus = bradypus[, -1]
plot(predictors, 1)
plot(world, add = TRUE)
points(bradypus, col='blue')
library(maptools)
data(wrld_simpl)
plot(predictors, 1)
plot(wrld_simpl, add = TRUE)
points(bradypus, col='blue')
# extract value of predictor variables for points where occurrence of
# bradypus is noted in the dataset
presvals = extract(predictors, bradypus)
set.seed(0)
# extract value of predictor variables for 500 random background points
backgr = randomPoints(predictors, 500)
absvals = extract(predictors, backgr)
pb = c(rep(1, nrow(presvals)), rep(0, nrow(absvals)))
sdmdata = data.frame(cbind(pb, rbind(presvals, absvals)))
# Encode the biome column as a factor (categorical data) to avoid it being
# treated as a numerical variable
sdmdata[,'biome'] = as.factor(sdmdata[,'biome'])
summary(sdmdata)
library(corrplot)
corrplot(cor(sdmdata[,2:5]))
pairs(sdmdata[,2:5], cex = 0.1)
saveRDS(smdata, "outputs/sdm.Rds")
saveRDS(sdmdata, "outputs/sdm.Rds")
saveRDS(presvals, "outputs/pvals.Rds")
?saveRDS
library(dismo)
library(dismo)
sdmdata = readRDS("outputs/sdm.Rds")
presvals = readRDS("outputs/pvals.Rds")
View(sdmdata)
m1 = glm(pb ~ bio1 + bio5 + bio12, data=sdmdata)
summary(m1)
m2 = glm(pb ~ ., data = sdmdata)
summary(m2)
View(presvals)
str(presvals)
bc = bioclim(presvals[,c('bio1', 'bio5', 'bio12')])
class(bc)
bc
pairs(bc)
corrplot(corr(bc))
corrplot(cor(bc))
View(bc)
View(presvals)
bc = bioclim(presvals[,c('bio1', 'bio5', 'bio12', 'bio16', 'bio17')])
class(bc)
bc
pairs(bc)
# glm for some of the climatic variables
m1 = glm(pb ~ bio1 + bio5 + bio12, bio16, bio17, data=sdmdata)
sdmdata = readRDS("outputs/sdm.Rds")
presvals = readRDS("outputs/pvals.Rds")
# glm for some of the climatic variables
m1 = glm(pb ~ bio1 + bio5 + bio12, bio16, bio17, data=sdmdata)
# glm for some of the climatic variables
m1 = glm(pb ~ bio1 + bio5 + bio12 + bio16 + bio17, data=sdmdata)
summary(m1)
bio1 = c(40, 150, 200)
bio5 = c(60, 115, 290)
bio12 = c(600, 1600, 1700)
View(presvals)
bio16 = c(400, 800, 1200)
bio17 = c(50, 400, 500)
pd = data.frame(cbind(bio1, bio5, bio12, bio16, bio17))
pd
predict(m1, pd)
bio1 = c(40, 150, 200)
bio5 = c(60, 115, 290)
bio12 = c(600, 1600, 1700)
# pd = data.frame(cbind(bio1, bio5, bio12, bio16, bio17))
pd = data.frame(cbind(bio1, bio5, bio12))
pd
# glm for some of the climatic variables
# m1 = glm(pb ~ bio1 + bio5 + bio12 + bio16 + bio17, data = sdmdata)
m1 = glm(pb ~ bio1 + bio5 + bio12, data = sdmdata)
summary(m1)
bio1 = c(40, 150, 200)
bio5 = c(60, 115, 290)
bio12 = c(600, 1600, 1700)
# pd = data.frame(cbind(bio1, bio5, bio12, bio16, bio17))
pd = data.frame(cbind(bio1, bio5, bio12))
pd
predict(m1, pd)
# bc = bioclim(presvals[,c('bio1', 'bio5', 'bio12', 'bio16', 'bio17')])
bc = bioclim(presvals[,c('bio1', 'bio5', 'bio12')])
class(bc)
bc
pairs(bc)
bio1 = c(40, 150, 200)
bio5 = c(60, 115, 290)
bio12 = c(600, 1600, 1700)
# pd = data.frame(cbind(bio1, bio5, bio12, bio16, bio17))
pd = data.frame(cbind(bio1, bio5, bio12))
pd
predict(m1, pd)
response(bc)
# glm for some of the climatic variables
m1 = glm(pb ~ bio1 + bio5 + bio12 + bio16 + bio17, data = sdmdata)
bc = bioclim(presvals[,c('bio1', 'bio5', 'bio12', 'bio16', 'bio17')])
bio1 = c(40, 150, 200)
bio5 = c(60, 115, 290)
bio12 = c(600, 1600, 1700)
bio16 = c(400, 800, 1200)
bio17 = c(50, 400, 500)
pd = data.frame(cbind(bio1, bio5, bio12, bio16, bio17))
View(pd)
predict(m1, pd)
response(bc)
predictors = stack(list.files(file.path(system.file(package="dismo"), 'ex'),
pattern='grd$', full.names=TRUE ))
names(predictors)
p = predict(predictors, m1)
plot(p)
p = rnorm(50, mean=0.7, sd=0.3)
a = rnorm(50, mean=0.4, sd=0.4)
library(ggplot2)
par(mfrow=c(1, 2))
plot(sort(p), col='red', pch=21)
points(sort(a), col='blue', pch=24)
legend(1, 0.95 * max(a,p), c('presence', 'absence'),
pch=c(21,24), col=c('red', 'blue'))
comb <- c(p,a)
group = c(rep('presence', length(p)), rep('absence', length(a)))
boxplot(comb~group, col=c('blue', 'red'))
comb
group
group = c(rep(1, length(p)), rep(0, length(a)))
group = c(rep('presence', length(p)), rep('absence', length(a)))
grouped = c(rep(1, length(p)), rep(0, length(a)))
cor.test(comb, grouped)$estimate
p = rnorm(50, mean=0.7, sd=0.3)
a = rnorm(50, mean=0.4, sd=0.4)
par(mfrow=c(1, 2))
plot(sort(p), col='red', pch=21)
points(sort(a), col='blue', pch=24)
legend(1, 0.95 * max(a,p), c('presence', 'absence'),
pch=c(21,24), col=c('red', 'blue'))
comb = c(p, a)
group = c(rep('presence', length(p)), rep('absence', length(a)))
boxplot(comb~group, col=c('blue', 'red'))
grouped = c(rep(1, length(p)), rep(0, length(a)))
cor.test(comb, grouped)$estimate
mv = wilcox.test(p, a)
View(mv)
auc = as.numeric(mv$statistic) / (length(p) * length(a))
auc
e = evaluate(p = p, a = a)
class(e)
e
par(mfrow = c(1, 2))
density(e)
boxplot(e, col = c('blue', 'red'))
samp = sample(nrow(sdmdata), round(0.75 * nrow(sdmdata)))
traindata = sdmdata[samp,]
View(traindata)
traindata = traindata[traindata[,1] == 1, 2:9]
View(traindata)
# set the sampling criteria for the training dataset
samp = sample(nrow(sdmdata), round(0.75 * nrow(sdmdata)))
traindata = sdmdata[samp,]
View(traindata)
View(traindata)
traindata = traindata[traindata[,1] == 1, 2:9]
# Now take the complement for the evaluation dataset
testdata = sdmdata[-samp,]
bc = bioclim(traindata)
e = evaluate(testdata[testdata==1,], testdata[testdata==0,], bc)
e = evaluate(testdata[testdata==1,], testdata[testdata==0,], bc)
e
plot(e, 'ROC')
plot(e, 'ROC')
pres = sdmdata[sdmdata[,1] == 1, 2:9]
back = sdmdata[sdmdata[,1] == 0, 2:9]
pres
back
View(sdmdata)
k = 5
group = kfold(pres, k)
group[1:10]
unique(group)
e = list()
for (i in 1:k) {
# train with whichever group does not equal i
train = pres[group != i,]
# test with the group that equals i (i.e. fit the model with it)
test = pres[group == i,]
bc = bioclim(train)
e[[i]] = evaluate(p = test, a = back, bc)
}
View(e)
View(e)
auc = sapply(e, function(x){x@auc})
mean(auc)
sapply( e, function(x){ threshold(x)['spec_sens'] } )
file = file.path(system.file(package="dismo"), "ex/bradypus.csv")
bradypus = read.table(file,  header=TRUE,  sep=',')
# species name not needed as before
bradypus = bradypus[,-1]
presvals = extract(predictors, bradypus)
set.seed(0)
backgr = randomPoints(predictors, 500)
nr = nrow(bradypus)
s = sample(nr, 0.25 * nr)
pres_train = bradypus[-s, ]
pres_test = bradypus[s, ]
nr = nrow(backgr)
set.seed(9)
s = sample(nr, 0.25 * nr)
back_train = backgr[-s, ]
back_test = backgr[s, ]
sb = ssb(pres_test, back_test, pres_train)
sb[,1] / sb[,2]
i = pwdSample(pres_test, back_test, pres_train, n=1, tr=0.1)
pres_test_pwd = pres_test[!is.na(i[,1]), ]
back_test_pwd = back_test[na.omit(as.vector(i)), ]
sb2 = ssb(pres_test_pwd, back_test_pwd, pres_train)
sb2[1]/ sb2[2]
bc = bioclim(predictors, pres_train)
evaluate(bc, p=pres_test, a=back_test, x=predictors)
evaluate(bc, p=pres_test_pwd, a=back_test_pwd, x=predictors)
